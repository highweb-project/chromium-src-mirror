// Copyright (C) 2016 INFRAWARE, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

typedef long VKCResult;
typedef unsigned long VKCuint;
[
    Exposed=(Window),
	DoNotCheckConstants
] interface WebVKC {
	const VKCResult VK_SUCCESS = 0;
	const VKCResult VK_NOT_READY = 1;
	const VKCResult VK_TIMEOUT = 2;
	const VKCResult VK_EVENT_SET = 3;
	const VKCResult VK_EVENT_RESET = 4;
	const VKCResult VK_INCOMPLETE = 5;
	const VKCResult VK_ERROR_OUT_OF_HOST_MEMORY = -1;
	const VKCResult VK_ERROR_OUT_OF_DEVICE_MEMORY = -2;
	const VKCResult VK_ERROR_INITIALIZATION_FAILED = -3;
	const VKCResult VK_ERROR_DEVICE_LOST = -4;
	const VKCResult VK_ERROR_MEMORY_MAP_FAILED = -5;
	const VKCResult VK_ERROR_LAYER_NOT_PRESENT = -6;
	const VKCResult VK_ERROR_EXTENSION_NOT_PRESENT = -7;
	const VKCResult VK_ERROR_FEATURE_NOT_PRESENT = -8;
	const VKCResult VK_ERROR_INCOMPATIBLE_DRIVER = -9;
	const VKCResult VK_ERROR_TOO_MANY_OBJECTS = -10;
	const VKCResult VK_ERROR_FORMAT_NOT_SUPPORTED = -11;
	const VKCResult VK_ERROR_SURFACE_LOST_KHR = -1000000000;
	const VKCResult VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001;
	const VKCResult VK_SUBOPTIMAL_KHR = 1000001003;
	const VKCResult VK_ERROR_OUT_OF_DATE_KHR = -1000001004;
	const VKCResult VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001;
	const VKCResult VK_ERROR_VALIDATION_FAILED_EXT = -1000011001;
	const VKCResult VK_RESULT_BEGIN_RANGE = -11;
	const VKCResult VK_RESULT_END_RANGE = 5;
	const VKCResult VK_RESULT_RANGE_SIZE = 17;
	const VKCResult VK_RESULT_MAX_ENUM = 0x7FFFFFFF;
	const VKCResult VKC_RESULT_SEND_IPC_MESSAGE_FAILURE = -9999;
	const VKCResult VKC_FAILURE = 16000001;
	const VKCResult VKC_ARGUMENT_NOT_VALID = 16000002;
	const VKCResult VKC_GET_SHADER_CODE_FAIL = 16000003;
	const VKCResult VKC_ALREADY_BEGIN_COMMAND_QUEUE = 16000004;
	const VKCResult VKC_COMMAND_QUEUE_NOT_BEGINING = 16000005;
	const VKCResult VKC_ERROR_NOT_SETARG_BUFFER_INDEX = 16000006;

	/* VKPhysicalDeviceType */
	const long VK_PHYSICAL_DEVICE_TYPE_OTHER = 0;
	const long VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1;
	const long VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2;
	const long VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3;
	const long VK_PHYSICAL_DEVICE_TYPE_CPU = 4;
	const long VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE = 0;
	const long VK_PHYSICAL_DEVICE_TYPE_END_RANGE = 4;
	const long VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE = 5;
	const long VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF;

	/* WebVKDevice getInfo name */
	const long VKC_apiVersion = 0;
	const long VKC_driverVersion = 1;
	const long VKC_vendorID = 2;
	const long VKC_deviceID = 3;
	const long VKC_deviceType = 4;
	const long VKC_deviceName = 5;
	const long VKC_maxMemoryAllocationCount = 6;
	const long VKC_maxComputeWorkGroupCount = 7;
	const long VKC_maxComputeWorkGroupInvocations = 8;
	const long VKC_maxComputeWorkGroupSize = 9;

	[RaisesException] void initialize();
	[RaisesException] VKCuint getPhysicalDeviceCount();
	boolean isInitialized();
	[RaisesException] sequence<WebVKCDevice> getDevices();
	[RaisesException] WebVKCDevice createDevice(optional VKCuint pdIndex = 0);
	[RaisesException] void releaseAll();    
};
